import bpy


# operator class
class CAMINJECT_OT_zoomin(bpy.types.Operator):
    """The operator that make a zoom-in movement"""
    bl_idname = "caminject.zoomin"
    bl_label = "Camera Injector - Zoom In"
    

    
    def execute(self, context):
        
        # ---- variables definition
        zoomedInFrame = 250
        zoomedOutFrame = 1
        
        zoomedInValue = 0.6
        zoomedOutValue = 1.0
        
        # ---- setting up the scene and their behaviours

        #create an empty object
        bpy.ops.object.empty_add(type='SPHERE', align='WORLD', location=(0, 0, 0), scale=(50, 50, 50))
        cameraTarget = bpy.context.active_object
        cameraTarget.name = "Camera target"

        bpy.ops.object.empty_add(type='PLAIN_AXES', align='WORLD', location=(0, 0, 0), scale=(1, 1, 1))
        cameraScaler = bpy.context.active_object
        #rename the active object
        cameraScaler.name = "Scale me to adjust the camera zoom"


        #create a camera
        bpy.ops.object.camera_add(enter_editmode=False, align='VIEW', location=(7, -10, 8), rotation=(59.0, 0.0, 35.0), scale=(2, 2, 2))
        #save the cam in a new variable
        camera = bpy.context.active_object

        #add a contraint of type "track to" and use the empty "cameraTarget" as the target
        bpy.ops.object.constraint_add(type='TRACK_TO')
        bpy.context.object.constraints["Track To"].target = cameraTarget

        #parent the camera to the scaler
        camera.parent = cameraScaler
        
        
        # ---- camera keying, for the movement
        cameraScaler.scale = (zoomedOutValue , zoomedOutValue, zoomedOutValue)
        cameraScaler.keyframe_insert(data_path="scale", frame=zoomedOutFrame)
        
        cameraScaler.scale = (zoomedInValue, zoomedInValue, zoomedInValue)
        cameraScaler.keyframe_insert(data_path="scale", frame=zoomedInFrame)
        
        return {'FINISHED'}
    
    
def register():
        bpy.utils.register_class(CAMINJECT_OT_zoomin)
        
def unregister():
        bpy.utils.unregister_class(CAMINJECT_OT_zoomin)
        
if __name__ == "__main__":
        register()